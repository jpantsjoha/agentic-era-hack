steps:

# Step 2: Debugging - Print Substitution Values
- name: 'gcr.io/cloud-builders/gcloud'  # You can use any image with echo
  id: 'debug-substitutions'
  entrypoint: 'bash'
  args:
    - '-c'
    - |
      echo "Debugging Substitution Values:"
      echo "PROJECT_ID: $PROJECT_ID"
      echo "_LOCATION: ${_LOCATION}"
      echo "_CORPUS_NAME: ${_CORPUS_NAME}"
      echo "_CORPUS_DISPLAY_NAME: ${_CORPUS_DISPLAY_NAME}"

# Step 2.5: Authentication - Generate access token for Vertex AI
- name: 'gcr.io/cloud-builders/gcloud'
  id: 'authenticate'
  entrypoint: 'bash'
  args:
    - '-c'
    - |
      # Show current identity (informational only)
      echo "Current identity:"
      gcloud auth list || echo "Could not list auth - continuing anyway"
      
      # Set the project explicitly
      gcloud config set project ${PROJECT_ID}
      
      # If a service account email is provided, impersonate it
      if [ ! -z "${_SERVICE_ACCOUNT}" ]; then
        echo "Impersonating service account: ${_SERVICE_ACCOUNT}"
        # Generate and store the access token
        gcloud auth print-access-token --impersonate-service-account=${_SERVICE_ACCOUNT} > access_token.txt
        echo "Access token generated and stored for service account impersonation"
      else
        # Use the default Cloud Build service account
        echo "Using default Cloud Build service account"
        gcloud auth print-access-token > access_token.txt
        echo "Access token generated and stored for default service account"
      fi
      
      # Verify token was generated
      if [ -s access_token.txt ]; then
        echo "✅ Access token successfully generated"
      else
        echo "❌ Failed to generate access token"
        exit 1
      fi

# Step 3: Create a RAG Corpus
- name: 'gcr.io/cloud-builders/curl'
  id: 'create-rag-corpus'
  entrypoint: 'bash'
  args:
    - '-c'
    - |
      apt-get update && apt-get install -y jq curl
      
      PROJECT_ID=${PROJECT_ID}
      LOCATION="${_LOCATION}"
      CORPUS_NAME=${_CORPUS_NAME}
      DISPLAY_NAME=${_CORPUS_DISPLAY_NAME}
      
      # Create a more detailed payload using the substitution variables
      echo "{
        \"displayName\": \"${_CORPUS_DISPLAY_NAME}\",
        \"name\": \"${_CORPUS_NAME}\"
      }" > corpus_payload.json

      echo "Payload for RAG corpus creation:"
      cat corpus_payload.json 

      # Get the access token from the file created in the authentication step
      ACCESS_TOKEN=$(cat access_token.txt)
      
      echo "Attempting to create RAG corpus in project ${PROJECT_ID}, location $${LOCATION}..."
      
      # Create the RAG corpus with better error handling
      RESPONSE=$(curl -s -w "\n%{http_code}" -X POST \
        -H "Authorization: Bearer $${ACCESS_TOKEN}" \
        -H "Content-Type: application/json" \
        "https://$${LOCATION}-aiplatform.googleapis.com/v1/projects/${PROJECT_ID}/locations/$${LOCATION}/ragCorpora" \
        -d @corpus_payload.json)
      
      # Extract the HTTP status code
      HTTP_STATUS=$(echo "$${RESPONSE}" | tail -n1)
      # Extract the response body
      RESPONSE_BODY=$(echo "$${RESPONSE}" | sed '$ d')
      
      echo "Response status code: $${HTTP_STATUS}"
      echo "Response body:"
      echo "$${RESPONSE_BODY}" | jq . || echo "$${RESPONSE_BODY}"
      
      # Check if the request was successful
      if [[ "$${HTTP_STATUS}" -ge 200 && "$${HTTP_STATUS}" -lt 300 ]]; then
        echo "✅ RAG corpus created successfully!"
      else
        echo "❌ Failed to create RAG corpus. Status code: $${HTTP_STATUS}"
        
        # Provide more detailed error information
        if [[ "$${HTTP_STATUS}" -eq 401 || "$${HTTP_STATUS}" -eq 403 ]]; then
          echo "Authentication or permission error. Please ensure:"
          echo "1. The service account has the 'Vertex AI User' role (roles/aiplatform.user)"
          echo "2. The Vertex AI API is enabled in your project"
          echo "3. If using service account impersonation, the impersonating account has permission to impersonate"
        fi
        
        exit 1
      fi
      


# Substitution variables
substitutions:
  _LOCATION: 'us-central1'         # API location (e.g., us-central1)
  _CORPUS_NAME: 'my-rag-corpus'    # Corpus name
  _CORPUS_DISPLAY_NAME: 'My RAG Corpus'  # Human-readable corpus name
  _SERVICE_ACCOUNT: ''             # Optional: Service account email to impersonate (must have Vertex AI permissions)
 

timeout: '1800s'  # 30-minute timeout

options:
  logging: CLOUD_LOGGING_ONLY
